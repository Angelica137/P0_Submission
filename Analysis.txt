-> Task 0

* Worst case complexity firstText(texts): O(n)
* Algorithm
		* initialise results variable (complexity: O(1))
		* access list element (complexity: O(1))
		* access list element (complexity: O(1))
		* access list element (complexity: O(1))
		* use .format() to add vars to string (complexity: O(n))
    * return result (complexity: O(1))
    

* Worst case complexity lastCall(calls): O(n)
* Algorithm
		* initialise results variable (complexity: O(n))
		* access list element (complexity: O(1))
		* access list element (complexity: O(1))
		* access list element (complexity: O(1))
		* use .format() to add vars to string (complexity: O(n))
    * return result (complexity: O(1))


I am not sure about the time complexity of .format(), I think 
it should be O(n)

-> Task 1

* Worst case complexity uniqueNumbers(texts, calls): O(n)
* Algorithm
		* initialise records variable and store both lists in it (complexity: O(1) + O(1))
		* initialise empty set (complexity: O(1))
		* map through records and add phone nos to set (complexity: O(n) + O(1) + O(1))
		* get length of set (complexity: O(1))
		* store copy in copy variable (complexity: O(1))
		* transform length of set to string (complexity: O(n))
		* return statement (complexity: O(1))


-> Task 2

* Worst case complexity longestCall(calls): O(n^2)
* Algorithm
		* initialise an empty dictionary (complexity: O(1))
		* map through calls (complexity: O(n))
		* search dictionary for call (complexity: O(n))
    		if found:
    		* add key value pair to dictionary (complexity: O(1))
				* transform string to int (complexity: O(n))
    		else:
				* transform string to int (complexity: O(n))
    		* increase value (complexity: O(1))
		* get max value from dictionary (complexity: O(n))
		* get the number with the highest value (complexity: O(n) + 1)
		* store copy in variable copy (complexity: O(1))
    * store copy with variables using .format in variable (complexity: O(1) + O(n))
    * return statement (complexity: O(1))


-> Task 3

* Worst case complexity calls_from_bangalore(calls): O(nlogn)
* Algorithm
		* initialise an empty list (complexity: O(1))
		* map through calls (complexity: O(n))
		    * search substring in call (complexity: O(nm))
        		* add area code to list (complexity: O(1))
				* search substring in call (complexity: O(nm))
    		    * add area code to list (complexity: O(1) + O(k) + O(nm) + O(1))
        * search substring in call (complexity: O(nm))
				    * add area code to list (complexity: O(1))
    * initialise set of unique codes (complexity: O(1))
    * sort set of unique codes (complexity: O(nlogn))
		* calcualte percentage of calls within bangalore (complexity: O(1))
    * return statement (complexity: O(1))


-> Task 4

* Worst case complexity find_telemarketers(calls, texts): O(n log n))
* Algorithm
		* initialise an empty set for outgoing calls(complexity: O(1))
		* initialise an empty set for incoming calls and texts(complexity: O(1))
		* map through calls (complexity: O(n))
        * add outgoing number to outgoing numbercalls set (complexity: O(1))
        * add incoming number to incoming calls and texts set (complexity: O(1))
    * map through texts (complexity: O(n))
        * add outgoing number to incoming calls and texts set (complexity: O(1))
        * add incoming number to incoming calls and texts set (complexity: O(1))
    * calcualte set difference (complexity: O(1) + O(n))
    * sort telemarketers set (complexity: O(n log n))
    * return statement (complexity: O(1))
    